# _*_ coding:utf-8 _*_
import numpy as np
from utils.FileUtil import get_line_lst
import matplotlib.pyplot as plt


class PcaClass(object):
    def __init__(self):
        pass

    def pca(self, arr_data):
        mean_value = np.mean(arr_data, axis=0)
        pass


def load_data():
    file = '../dataset/pca/pca_data.txt'
    lst_row = get_line_lst(file)

    arr_data = np.array([[float(item) for item in row.split()] for row in lst_row])

    return arr_data


def sub_mean_data(data):
    """
    use source data subtract it's mean value
    :param data: np array
    :return:
    """
    return data - np.mean(data, axis=0)


def plot_compare_data(src_data, sub_mean_data):
    """
    The comparing plot of src_data and the value
    which is generated by src_data subtract it's mean value
    :param src_data:
    :param sub_mean_data:
    :return:
    """
    plt.figure(1)
    plt.subplot(211)
    plt.scatter(src_data[:, 0], src_data[:, 1], c='r')
    plt.title('source data')

    plt.subplot(212)
    plt.scatter(sub_mean_data[:, 0], sub_mean_data[:, 1], c='r')
    plt.title('sub_mean_data')
    plt.show()


def plot_src_data(data):
    # f1 = plt.figure(1)
    # plt.plot(data, 'ro')
    # mt = np.array([[1, 2], [2.6, 3.6]])
    # print data[:, 0], data[:, 0].shape
    # print data[:, 1], data[:, 1].shape
    # x = [1, 2]
    # y = [2.6, 3.6]
    # plt.scatter(x, y)
    # add c='r', or you will get error
    plt.scatter(data[:, 0], data[:, 1], c='r')
    # plt.scatter(data, 'ro')
    plt.show()


def plot_eigen_vec(data, eig_vec):
    # plt.scatter(data[:, 0], data[:, 1], c='b')
    # plt.plot([eig_vec[:, 0][0], 0], [eig_vec[:, 0][1], 0], color='red')
    print eig_vec
    print [eig_vec[:, 0][0], 0], [eig_vec[:, 0][1], 0]
    print [eig_vec[:, 1][0], 0], [eig_vec[:, 1][1], 0]
    # plt.plot([eig_vec[:, 1][0], 0], [eig_vec[:, 1][1], 0], color='red')

    plt.show()


if __name__ == '__main__':
    data = load_data()
    mean_data = sub_mean_data(data)
    # plot_compare_data(data, mean_data)
    cov = np.cov(mean_data[:, 0], mean_data[:, 1])
    eig_val, eig_vec = np.linalg.eig(cov)
    print eig_val, eig_vec

    cov2 = np.cov(data[:, 0], data[:, 1])
    eig_val2, eig_vec2 = np.linalg.eig(cov2)
    print eig_val2, eig_vec2

    # plot_eigen_vec(mean_data, eig_vec)
    # mt = np.array([[3, -1], [-1, 3]])
    # plot_src_data(data)
    pca = PcaClass()
    # pca.pca(data)
    pass
